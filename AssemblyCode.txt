// Test assembly language file for Micro-Pirate-Processors
// Computer architecture
// FP1
// 3/31/2021
// Zachary Bowyer, Benjamin Greenwood, Niklas Roberts, Garrett O'Shaughnessy

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
// Single line comment
/* 
   Block comment 
   Block comment
*/

//Registers have a preceding $
//Each part of any instruction will be separated by a comma ','

// Saved value registers are $S0 - $S7
// Temporary value registers are $T0 - $T7
// Stack pointer is $SP
// Return address is $RA
// Constant non-floating point 0 is $0
// Constant floating point 0 is $f0

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//Program begin
.main
    PC 0 --Set program counter to first location in memory
.data
    var memoryTest1 = 12 --Since there are 32 registers, the address of this should be 33
.text
    //Test I-type instructions
    add, $S0, $0, 5     //Put non-floating pointt value of 5 into saved register 0
    addif, $S1, 10.76   //Put floating point value of 10.76 into saved register 1
    addif, $S2, 7.76    //Put floating point value of 10.76 into saved register 2
    sub, $S3, $S2, $S1  //Put S2 - S1 into register S3
    mul, $S4, $S2, $S1  //Put S2 * S1 into register S4
    div, $S5, $S2, $S1  //Put S2 / S1 into register S5
    mod, $S6, $S2, $S1  //Put S2 mod S1 into register S6
    addf, $S7, $S2, $S1 //Put S2 + S1 into S7 (Floating point addition)

    //Test R-type instructions
    add, $T0, $0, 5      //Put non floating point value of 5 into temp register 0
    add, $T1, $0, 6      //Put non floating point value of 6 into temp register 1
    and, $T3, $T0, $T1   //Put T0 AND T1 into T3
    or, $T4, $T0, $T1    //Put T0 OR T1 into T4

    //Test special instructions (Also I-type)
    lw, $T5, 0x33 --Put value of 12 into temporary register 5
    sw, $T0, 0x34 --Put value of 5 into memory location 0x34

    jump, label1
    add, $S0, $0, 5     //Should be skipped
    add, $S0, $0, 5     //Should be skipped
    add, $S0, $0, 5     //Should be skipped
    add, $S0, $0, 5     //Should be skipped
    label1:

    beq, $T0, 5, label2 //Should be taken
    add, $S0, $0, 5     //Should be skipped
    label2:

    bne, $T0, 6, label3 //Shouldnt be taken
    add, $S0, $0, 5     
    label3:

    beq, $T1, 5, label4 //Shouldnt be taken
    add, $S0, $0, 5     //Should be skipped
    label4:

    bne, $T1, 6, label5 //Should be taken
    add, $S0, $0, 5     
    label5:
.end
